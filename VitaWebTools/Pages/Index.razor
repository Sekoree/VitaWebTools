@page "/"
@using VitaWebTools.Models
@using BlazorDownloadFile

@inject Utilities _utils;
@inject HomebrewUtility _hbUtils;
@inject IBlazorDownloadFileService _downloadFileService;

@inject Dictionary<string, string> _textsDictionary;

<PageTitle>Index</PageTitle>

<MudExpansionPanels>

    <MudExpansionPanel IsExpanded="_aidExpanded"
                       Disabled="_aidDisabled"
                       Text="@_aidPanelText">

        <MudMarkdown CodeBlockTheme="CodeBlockTheme.Default"
                     Value="@(_textsDictionary["GetAID"])">
        </MudMarkdown>
        <MudTextField T="string"
                      @ref="TextFieldHack"
                      Error="true"
                      ErrorText="@_aidErrorText"
                      Immediate="true"
                      @bind-Value="_aid"
                      Placeholder="Your AID or redirect URL here">
        </MudTextField>
        <br/>
        <MudButton ButtonType="ButtonType.Button"
                   Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="ValidateAidAsync">
            Validate AID
        </MudButton>

    </MudExpansionPanel>

    <MudExpansionPanel IsExpanded="_homebrewsExpanded"
                       Disabled="_homebrewsDisabled"
                       Text="@_homebrewsPanelText">

        <MudMarkdown CodeBlockTheme="CodeBlockTheme.Default"
                     Value="@(_textsDictionary["SelectHomebrews"])">
        </MudMarkdown>
        <MudList>
            @foreach (var item in AvailableHomebrews)
            {
                <MudListItem>
                    <MudCheckBox T="bool" @bind-Checked="item.Selected"></MudCheckBox>
                    <MudText Inline="true">@item.Title</MudText>
                </MudListItem>
            }
        </MudList>

        <MudButton ButtonType="ButtonType.Button"
                   Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="ConfirmSelectedHomebrewsAsync">
            Confirm Selection
        </MudButton>

    </MudExpansionPanel>

    <MudExpansionPanel IsExpanded="_downloadExpanded"
                       Disabled="_downloadDisabled"
                       Text="Download and usage">

        <MudMarkdown CodeBlockTheme="CodeBlockTheme.Default"
                     Value="@(_textsDictionary["DownloadPreamble"])">
        </MudMarkdown>

        <MudButton Disabled="@_downloadProcessing"
                   OnClick="DownloadBackupsAsync"
                   Variant="Variant.Filled"
                   Color="Color.Primary">
            @if (_downloadProcessing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Preparing Zip</MudText>
            }
            else
            {
                <MudText>Get Homebrews</MudText>
            }
        </MudButton>

        <br/>
        <br/>

        <MudMarkdown CodeBlockTheme="CodeBlockTheme.Default"
                     Value="@(string.Format(_textsDictionary["DownloadNotes"], _aid))">
        </MudMarkdown>

    </MudExpansionPanel>

</MudExpansionPanels>

@code
{
    #region AID Block

    private string _aidPanelText = "Getting your AID";
    private bool _aidDisabled = false;
    private bool _aidExpanded = true;
    private string? _aid = string.Empty;
    private string? _aidErrorText = string.Empty;
    private MudTextField<string>? TextFieldHack { get; set; }

    #endregion

    #region Homebrews Block

    private string _homebrewsPanelText = "Select the Homebrews you want";
    private bool _homebrewsDisabled = true;
    private bool _homebrewsExpanded = false;

    private List<SelectableHomebrewModel> SelectedHomebrews { get; set; } = new();

    private List<SelectableHomebrewModel> AvailableHomebrews { get; set; } = new();

    #endregion

    #region Download Block

    private bool _downloadDisabled = true;
    private bool _downloadExpanded = false;
    private bool _downloadProcessing = false;

    #endregion

    protected override async Task OnInitializedAsync()
    {
        var available = await _hbUtils.GetAvailableHomebrewsAsync();
        AvailableHomebrews = available.Select(x => new SelectableHomebrewModel(x)).ToList();
        await base.OnInitializedAsync();
    }

    private async Task ValidateAidAsync()
    {
        try
        {

            if (string.IsNullOrWhiteSpace(_aid))
            {
                return;
            }

            if (Uri.TryCreate(_aid, UriKind.Absolute, out var aidTokenUrl))
            {
                _aid = await _utils.GetUserAID(aidTokenUrl.ToString());
            }
            _aid = _aid?.Replace(" ", "");
            var cmaKey = _utils.GenerateCmaKey(_aid!);
            if (string.IsNullOrWhiteSpace(cmaKey) || string.IsNullOrWhiteSpace(_aid))
            {
                _aidErrorText = "AID seems to be invalid, please try again";
                return;
            }
            _aidPanelText += $" | Got AID: {_aid}";
            _aidExpanded = false;
            _aidDisabled = true;
            _homebrewsDisabled = false;
            _homebrewsExpanded = true;

        }
        catch
        {
            // ignored
        }
    }

    private Task ConfirmSelectedHomebrewsAsync()
    {
        SelectedHomebrews = AvailableHomebrews.Where(x => x.Selected).ToList();
        if (!SelectedHomebrews.Any())
            return Task.CompletedTask;

        _homebrewsPanelText += $" | Selected: {string.Join(", ", SelectedHomebrews!.Select(x => x.Title))}";
        _homebrewsExpanded = false;
        _homebrewsDisabled = true;
        _downloadDisabled = false;
        _downloadExpanded = true;
        return Task.CompletedTask;
    }

    private async Task DownloadBackupsAsync()
    {
        _downloadProcessing = true;

        //hopefully doesnt break
        using (var data = await _hbUtils.GetZippedHomebrewsAsync(_aid!, SelectedHomebrews.Select(x => x.TitleId).ToArray()))
        {
            await _downloadFileService.DownloadFile($"{_aid}.zip", data.ToArray(), "application/zip");
        }

        _downloadProcessing = false;
    }
}